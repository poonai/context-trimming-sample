# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (1)
# #########################################################################

class TaskStatus(str, Enum):
    COMPLETED = "COMPLETED"
    CLARIFYING = "CLARIFYING"

# #########################################################################
# Generated classes (6)
# #########################################################################

class AgentResponse(BaseModel):
    tools: typing.Union["QuandraticSolver", "QuadraticDerivative", "QuadraticEvaluator", "MessageToUser"]

class MessageToUser(BaseModel):
    type: typing_extensions.Literal['message_to_user']
    response: str
    task_status: TaskStatus

class QuadraticDerivative(BaseModel):
    type: typing_extensions.Literal['quadratic_derivative']
    equation: str

class QuadraticEvaluator(BaseModel):
    type: typing_extensions.Literal['quadratic_evaluator']
    equation: str
    x_value: str

class QuandraticSolver(BaseModel):
    type: typing_extensions.Literal['quadratic_solver']
    equation: str

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
