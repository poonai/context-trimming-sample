# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> OpenRouter {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-4.1-mini\"\n  }\n}\n\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.206.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "math.baml": "\nclass QuandraticSolver {\n\n    type \"quadratic_solver\" @description(#\"\n        DESCRIPTON: QuandraticSolver is used to solve quadratic equation\n    \"#)\n\n    equation string @description(#\"\n        eg: 2*x^2 + 4*x - 6 = 0\n    \"#)\n}\n\nclass QuadraticDerivative {\n    type \"quadratic_derivative\" @description(#\"\n        DESCRIPTION: QuadraticDerivative is used to find the derivative of quadratic equation\n    \"#)\n\n    equation string @description(#\"\n        eg: 2*x^2 + 4*x - 6 = 0\n    \"#)\n}\n\nclass QuadraticEvaluator {\n    type \"quadratic_evaluator\" @description(#\"\n         DESCRIPTION: QuadraticEvaluator is used to evaluate an quadratic equation\n    \"#)\n\n    equation string @description(#\"\n        eg: 2*x^2 + 4*x - 6 = 0\n    \"#)\n\n    x_value string @description(#\"\n        The value to substitute for x\n    \"#)\n}\n\nenum TaskStatus {\n    COMPLETED \n    CLARIFYING\n}\n\nclass MessageToUser {\n    type \"message_to_user\" @description(#\"\n        DESCRIPTION: MessageToUser is used to respond to the user\n    \"#)\n\n    response string @description(#\"\n        The assitant response to the user\n    \"#)\n\n    task_status TaskStatus\n}\n\n\nclass AgentResponse {\n    tools QuandraticSolver  | QuadraticDerivative | QuadraticEvaluator | MessageToUser\n}\n\nfunction MathChat(message_history: string[]) -> AgentResponse {\n    client OpenRouter\n    prompt #\"\n        You're an helpful Math AI assistant. You have tools to solve equation related to quadratic \n        equation. The user query could be simple ,or complex that requires you to take mutiples turns\n        between you and tools to resolve user query.\n\n        Use message_to_user tools to reply or ask clarification question to the user.\n\n        <CONVERSATION HISTORY>\n        {% for message in message_history %}\n         {{ message}}  \n        {% endfor %}\n        </CONVERSATION HISTORY>\n       \n        {{ctx.output_format}}\n    \"#\n}\n\nfunction SummarizeContext(message_history: string[]) -> string []{\n    client OpenRouter\n    prompt #\"\n         Your job is to summerize the user conversation to reduce the token length.\n         ideas to summerize:\n         - remove intermediate tool call and tool response \n         - summerize the user question and response in concise form\n\n         <EXAMPLE INPUT>\n           {'role': 'user', 'msg': 'solve x^2 - 5*x + 6 =0 and find derivative'}  \n           {'role': 'assistant', 'msg': 'I need to solve this quadratic equation', 'tool_name': 'quadratic_solver', 'tool_args': {'equation': 'x^2 - 5*x + 6 = 0'}}  \n           {'role': 'tool', 'msg': 'Solved equation: x^2 - 5*x + 6 = 0. Roots: [2, 3]', 'tool_name': 'quadratic_solver', 'metadata': {'equation': 'x^2 - 5*x + 6 = 0', 'result': '[2, 3]'}}  \n           {'role': 'assistant', 'msg': 'I need to find the derivative of this quadratic equation', 'tool_name': 'quadratic_derivative', 'tool_args': {'equation': 'x^2 - 5*x + 6 = 0'}}  \n           {'role': 'tool', 'msg': 'Derivative of equation: x^2 - 5*x + 6 = 0. Result: 2*x - 5', 'tool_name': 'quadratic_derivative', 'metadata': {'equation': 'x^2 - 5*x + 6 = 0', 'result': '2*x - 5'}}\n           {'role': 'assistant', 'msg': 'The roots of the equation x^2 - 5*x + 6 = 0 are 2 and 3. The derivative of the equation is 2*x - 5. If you want me to evaluate the equation or the derivative at a specific x value, please let me know.', 'tool_name': 'message_to_user'}    \n         </EXAMPLE INPUT>\n\n        <EXAMPLE OUTPUT>\n           {'role': 'user', 'msg': 'solve x^2 - 5*x + 6 =0 and find derivative'}  \n           {'role': 'assistant', 'msg': 'The roots of the equation x^2 - 5*x + 6 = 0 are 2 and 3. The derivative of the equation is 2*x - 5. 'tool_name': 'message_to_user'}    \n        </EXAMPLE OUTPUT>\n\n        <BAD OUTPUT>\n          \"User asked to solve x^2 - 5*x + 6 = 0, find its derivative, and the squares of the roots; assistant provided roots (2, 3), derivative (2*x - 5), and squares (4, 9).\"\n        </BAD OUTPUT>\n\n        <GOOD OUTPUT>\n        {'role': 'user', 'msg': 'solve x^2 - 5*x + 6 =0 and find derivative'}\n        {'role': 'assistant', 'msg': 'roots (2, 3), derivative (2*x - 5), and squares (4, 9). 'tool_name': 'message_to_user'} \n        </GOOD OUTPUT>\n        \n        <INPUT>\n        {% for message in message_history %}\n         {{ message}}  \n        {% endfor %}\n        </INPUT>\n        {{ctx.output_format}}\n    \"#\n} ",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n\n\n",
}

def get_baml_files():
    return _file_map